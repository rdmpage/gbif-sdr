<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:maps="com.google.maps.*" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#F2F2F2, #F2F2F2]" 
	creationComplete="preInit()" xmlns:components="org.gbif.components.*" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:states>
		<mx:State name="Sources">
			<mx:SetProperty target="{map}" name="x" value="0"/>
			<mx:SetStyle target="{button1}" name="right" value="11"/>
			<mx:AddChild position="lastChild">
				<components:SourcesPanel filters="{[glow1]}" sourcesAc="{sourcesAc}" height="319" right="11" bottom="5"/>
			</mx:AddChild>
			<mx:SetProperty target="{button2}" name="width" value="120"/>
		</mx:State>
	</mx:states>

<mx:Script>
	<![CDATA[
		import flash.net.navigateToURL;
		import com.google.maps.LatLngBounds;
		import mx.managers.ToolTipManager;
		import gs.TweenMax;
		import mx.utils.ObjectProxy;
		import com.google.maps.MapZoomEvent;
		import mx.events.ResizeEvent;
		import mx.binding.utils.BindingUtils;
		import com.google.maps.Color;
		import org.gbif.maps.CustomWMSTileLayerOverlay;
		import org.gbif.maps.CustomWMSTileLayer;
		import com.google.maps.MapEvent;
		import mx.collections.ArrayCollection;
		import com.google.maps.interfaces.IPane;
		import org.gbif.maps.CustomTileLayerOverlay;
		import org.gbif.maps.CustomTileLayer;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.http.mxml.HTTPService;
		import com.google.maps.controls.ControlPosition;
		import com.google.maps.controls.ZoomControlOptions;
		import com.google.maps.MapType;
		import com.google.maps.LatLng;
		import com.google.maps.controls.MapTypeControl;
		import com.google.maps.controls.ZoomControl;
		
		[Bindable]
		public var scientificName:String;
		[Bindable]
		public var numOccurrences:String="-";
			
		[Bindable]public var sourcesAc:ArrayCollection=new ArrayCollection();
		
		[Bindable]public var mapTypes:ArrayCollection = new ArrayCollection([ {label:"TERRAIN"}, 
															                  {label:"MAP"}, 
															                  {label:"SATELLITE"},
															                  {label:"HYBRID"} ]);
															                  
		private var sourcesDic:Dictionary = new Dictionary();		
		private var ctloGbif:CustomTileLayerOverlay;											                  

		private var sourcesColors:Array = [Color.GREEN,Color.RED,Color.BLUE,Color.YELLOW];
		
		private function preInit():void {
			//get data
			roSdr.getSpeciesDetailsByNameId(parameters.speciesId);			
			scientificName=parameters.scientificName;

			//Get the number of records in GBIF for this taxonId
			var httpSrv:HTTPService=new HTTPService();
			httpSrv.resultFormat="text";
			httpSrv.url = "http://de.mirror.gbif.org/ws/rest/occurrence/count?taxonConceptKey="+parameters.nub_concept_id;
			httpSrv.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void {
				trace(event.message);
			});
			httpSrv.addEventListener(ResultEvent.RESULT,function(event:ResultEvent):void {
				try {
					var start:Number = String(event.result).indexOf("totalMatched=\"") + (("totalMatched=\"").length);
					var end:Number = String(event.result).indexOf("\"",start);	
					numOccurrences=nf.format(Number(String(event.result).slice(start,end)));
				} catch(e:Error) {
					trace(e);
				}
			});
			httpSrv.send();			
			
			
			
			//Modify Tooltip behaviour so that it show inmediately
			ToolTipManager.showDelay = 0;
			ToolTipManager.hideDelay = 4000;	
			
			
		}
		
		
		private function init():void {
			var zco:ZoomControlOptions=new ZoomControlOptions({
				position: new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT, 12, 12),
				hasScrollTrack: false
			});
			/* var zc:ZoomControl = new ZoomControl(zco);
			map.addControl(zc); */
			
			/* map.addControl(new MapTypeControl()); */
			map.setCenter(new LatLng(30,0),2,MapType.PHYSICAL_MAP_TYPE);
			
			
			
			//Add GBIF layer
			var ctlgbif:CustomTileLayer= new CustomTileLayer("http://maps|N|.eol.org/php/map/getEolTile.php?tile=|X|_|Y|_|Z|_"+parameters.nub_concept_id,"",23);
			ctloGbif = new CustomTileLayerOverlay(ctlgbif);
			ctlgbif.ctlo=ctloGbif;
			ctloGbif.foreground.alpha=0.7;
			BindingUtils.bindProperty(loading,"visible",ctloGbif,"numRunningRequest");
			map.addOverlay(ctloGbif);			
			
			
			map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onMapZoomChanged);		
			
			
		}
		
		private function onMapZoomChanged(event:MapZoomEvent):void {
			zoomSlider.value = map.getZoom();
		}
		
		private function onSdrServiceResult(event:ResultEvent):void {
			var i:Number=0;
			var sources:ArrayCollection=new ArrayCollection();
			for each(var rawSource:Object in event.result as Array) {
				var source:ObjectProxy = new ObjectProxy(rawSource);
				var curColor:Number = sourcesColors[i];
				i++;
				
				//for the legend
				source.curColor=curColor;
				sources.addItem(source);
			
				//add the layers to the map
				var ctlwms:CustomWMSTileLayer = new CustomWMSTileLayer(parameters.nub_concept_id,source.resource_id,source.curColor);		
				var ctlo2:CustomWMSTileLayerOverlay = new CustomWMSTileLayerOverlay(ctlwms);
				ctlwms.ctlo = ctlo2;
				ctlo2.foreground.alpha=0.82;				
				map.addOverlay(ctlo2);	
				BindingUtils.bindProperty(loading,"visible",ctlo2,"numRunningRequest");
				sourcesDic[source.resource_id] = ctlo2;
					
				
			}
			
			sourcesAc= sources;
		}
		
		public function toggleSourceVisibility(sourceId:Number):void {
			TweenMax.killAllTweens(true);
			if((sourcesDic[sourceId] as CustomWMSTileLayerOverlay).foreground.alpha==0) {
				TweenMax.to((sourcesDic[sourceId] as CustomWMSTileLayerOverlay).foreground,0.6, {alpha:0.82});
			} else {
				TweenMax.to((sourcesDic[sourceId] as CustomWMSTileLayerOverlay).foreground,0.6, {alpha:0});
			}	
		}
		public function toggleGbifVisibility():void {
			TweenMax.killAllTweens(true);
			if(ctloGbif.foreground.alpha==0) {
				TweenMax.to(ctloGbif.foreground,0.6, {alpha:0.7});
				ctloGbif.foreground.alpha=0.7;
			} else {
				TweenMax.to(ctloGbif.foreground,0.6, {alpha:0});
			}	
		}
		
		private var geoserverUrl:String ="http://ec2-174-129-85-138.compute-1.amazonaws.com:8080/geoserver/";
		private function getDownloadUrl(format:String):String {
				
			var distributionsFilter:Array = [];
			for each(var source:Object in sourcesAc) {
				distributionsFilter.push("id=" + source.id);
			}	
			
			var distributionsFilterStr:String = distributionsFilter.join("%20or%20");
			
			var url:String;
			switch (format) {
				case "PNG":
					url = geoserverUrl + "wms?WIDTH=1024&HEIGHT=1024&SRS=EPSG%3A4326&"+
				"STYLES=&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&EXCEPTIONS=application%2Fvnd.ogc.se_inimage"+
				"&LAYERS=sdr%3Adistributions&FORMAT=image%2FpngL&"+
				"CQL_FILTER="+distributionsFilterStr+"&BBOX=-180,-90,180,90";
					break;							
				case "KML":
					url = geoserverUrl + "wms?WIDTH=1024&HEIGHT=1024&SRS=EPSG%3A4326&"+
				"STYLES=&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&EXCEPTIONS=application%2Fvnd.ogc.se_inimage"+
				"&LAYERS=sdr%3Adistributions&FORMAT=application%2Fvnd.google-earth.kml+XML&"+
				"CQL_FILTER="+distributionsFilterStr+"&BBOX=-180,-90,180,90";
					break;					
				case "SHP":
					url = geoserverUrl + "ows?SERVICE=WFS&VERSION=1.0.0&typeName=sdr%3Adistributions" + 
				"&outputformat=SHAPE-ZIP&REQUEST=GetFeature&CQL_FILTER=id%3D"+distributionsFilterStr;
					break;			
				case "GML":
					url = geoserverUrl + "ows?SERVICE=WFS&VERSION=1.0.0&typeName=sdr%3Adistributions" + 
				"&REQUEST=GetFeature&CQL_FILTER=id%3D"+distributionsFilterStr;
					break;
				case "PDF":
					url = geoserverUrl + "wms?WIDTH=1024&HEIGHT=1024&SRS=EPSG%3A4326&"+
				"STYLES=&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&EXCEPTIONS=application%2Fvnd.ogc.se_inimage"+
				"&LAYERS=sdr%3Adistributions&FORMAT=application%2Fpdf&"+
				"CQL_FILTER="+distributionsFilterStr+"&BBOX=-180,-90,180,90";
					break;
			}	
			
			return url;
		}
		
		private function downloadData(event:Event) {
			var url:String= getDownloadUrl(ComboBox(event.target).selectedItem.data);
			navigateToURL(new URLRequest(url));
			
		}
		
		private function onZoomSliderChange():void {
			map.setZoom(zoomSlider.value);
		}
		private function zoomIn():void {
			zoomSlider.value++;
			map.setZoom(map.getZoom()+1);
		}
		private function zoomOut():void {
			zoomSlider.value--; 
			map.setZoom(map.getZoom()-1);
		}
		
		private function onChangeMapType(ev: Event):void {
			
			switch ( ev.currentTarget.selectedItem.label ) {
				case 'MAP':
					map.setMapType(MapType.NORMAL_MAP_TYPE);
				break; 
				case 'TERRAIN':
					map.setMapType(MapType.PHYSICAL_MAP_TYPE);
				break; 
				case 'HYBRID':
					map.setMapType(MapType.HYBRID_MAP_TYPE);
				break;
				case 'SATELLITE':
					map.setMapType(MapType.SATELLITE_MAP_TYPE);
				break;
			} 
		}
		
		
		/**
		 * Toggle between full screen and not full screen.
		 */ 			
		public function toggleFullScreen():void{
            try {
            	var tim:Timer;
                switch (Application.application.stage.displayState) {
                    case StageDisplayState.FULL_SCREEN:
                        Application.application.stage.displayState = StageDisplayState.NORMAL;
                        tim = new Timer(1000,1);
		            	tim.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {	
		            		dispatchEvent(new Event(ResizeEvent.RESIZE));
		            	});
                        break;
                    default:
                        Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
                        tim = new Timer(1000,1);
		            	tim.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {	
		            		dispatchEvent(new Event(ResizeEvent.RESIZE));
		            	});
                        
                        break;
                }
            } catch (err:SecurityError) {
                // ignore
                trace(err.message);
            }
		}   		
		
	]]>
</mx:Script>
	<!--<mx:Style source="style/skin/widget.css"/>-->
	<mx:Style source="style/skin/ui.css"/>
	<mx:Style source="style/skin/fonts.css"/>

	<mx:Canvas left="7" right="7" bottom="30" top="56" borderColor="#6D6D6D" borderStyle="solid" id="canvas1">
		<maps:Map id="map" key="{parameters.api_key}" width="100%" height="100%" mapevent_mapready="init()"  y="0"/>
		<mx:HBox left="7" horizontalGap="-6" top="6" verticalAlign="middle" paddingLeft="6" paddingRight="6" height="21" horizontalAlign="center"
			backgroundColor="#9BBD88" cornerRadius="3" borderStyle="none" backgroundAlpha="0.75" paddingTop="3" paddingBottom="3">
			<mx:Button styleName="btnZoomMinus" click="zoomOut()" height="14" width="14"
				mouseChildren="false" buttonMode="true" useHandCursor="true"/>
			<mx:HSlider id="zoomSlider" minimum="0" maximum="16" snapInterval="1" tickInterval="1" 
				liveDragging="true" value="2" styleName="zoomSlider" change="onZoomSliderChange()"/>
			<mx:Button styleName="btnZoomMore" click="zoomIn()" height="14" width="14"
				mouseChildren="false" buttonMode="true" useHandCursor="true"/>
		</mx:HBox>
		<mx:ComboBox id="mapType" left="250" top="10" height="21" dataProvider="{mapTypes}" change="onChangeMapType(event)" visible="false"/>
		<mx:Canvas id="loading" width="120" height="20" styleName="softYellowContainerRounded" top="6" horizontalCenter="0">
			<mx:SWFLoader x="4" y="1" source="@Embed('assets/tinyLoading.swf')" width="12" height="12"/>
			<mx:Label y="0" text="Loading data..." color="#5E5E5E" fontSize="11" fontFamily="DINOT-Medium" left="22"/>
		</mx:Canvas>
	</mx:Canvas>
	<mx:Button label="fullscreen" right="7" top="5" fontSize="12" click="toggleFullScreen()" height="21" styleName="buttonGrey"
		useHandCursor="true" buttonMode="true" mouseChildren="false"/>
	<mx:Button label="source selector" right="11" bottom="5" click="(currentState=='Sources')?currentState='':currentState='Sources';" height="21" id="button1" styleName="buttonGrey" useHandCursor="true" buttonMode="true" mouseChildren="false" width="120"/>
<!--	<mx:ComboBox id="exportCombo" left="10" bottom="5" width="85" close="downloadData(event)" height="21">
		<mx:dataProvider>
			<mx:ArrayCollection>
				<mx:Object label="KML" data="KML" />
				<mx:Object label="PNG" data="PNG" />
				<mx:Object label="SHP" data="SHP" />
				<mx:Object label="GML" data="GML" />
				<mx:Object label="PDF" data="PDF" />
			</mx:ArrayCollection>
		</mx:dataProvider>
	</mx:ComboBox>-->
	
	<mx:Button label="share this map" bottom="5" left="135" height="21" styleName="buttonGrey"
		useHandCursor="true" buttonMode="true" mouseChildren="false" id="button2" width="120"
		click="sharePanel.visible = true"/>
	<mx:Button label="export this map" bottom="5" left="11" height="21" styleName="buttonGrey"
		useHandCursor="true" buttonMode="true" mouseChildren="false" id="button0" width="120"
		click="exportPanel.visible = true"/>
	<mx:Image source="{'/flickrImage.php?q='+scientificName}" left="7" top="5" width="45" height="45" />
	<mx:HBox y="3" left="56" right="97" verticalAlign="bottom" horizontalGap="0">
		<mx:Label text="{scientificName +','}" fontFamily="Georgia" fontStyle="italic" fontSize="24" fontWeight="normal" color="#393939" letterSpacing="-1"/>
		<mx:Label text="updated 2 days ago" color="#878787" fontFamily="DINOT-Medium" fontSize="11" letterSpacing="0"/>
	</mx:HBox>

	<mx:HBox y="31" left="56" right="97" horizontalGap="0">
		<mx:Label text="{(sourcesAc.length + 1) + ' GBIF, GROMS'}" fontFamily="DINOT-Medium" fontSize="11" color="#666666"/>
		<mx:Label text="|" width="6"/>
		<mx:Label text="{numOccurrences +'occurrences in GBIF'}" fontFamily="DINOT-Medium" fontSize="11" color="#666666"/>
	</mx:HBox>
	<mx:NumberFormatter id="nf" useThousandsSeparator="true" />
	<mx:RemoteObject id="roSdr" endpoint="../amfphp/gateway.php" destination="SDRServices" source="SDRServices"
	 result="onSdrServiceResult(event)" fault="trace(event.fault)" />
	<components:ExportPanel filters="{[glow1]}" id="exportPanel" left="11" bottom="5" visible="false" />
	<components:SharePanel filters="{[glow1]}" id="sharePanel" left="135" bottom="5" visible="false" />

	<mx:GlowFilter id="glow1" blurX="5" blurY="5" color="0x000000" strength=".5" quality="2" />

</mx:Application>
