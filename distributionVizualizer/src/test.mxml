<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	creationComplete="onInit(event);" xmlns:view="org.vizzuality.view.*"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
        
        <mx:Style source="skin/general.css" />
        <mx:Style source="skin/Fonts.css" />
        
        <mx:Script>
                <![CDATA[
                	import mx.utils.ObjectUtil;
                
                	import mx.managers.FocusManager;
                	import com.adobe.serialization.json.JSON;
                	import mx.collections.ArrayCollection;
                	import mx.rpc.events.ResultEvent;
                	import mx.rpc.http.mxml.HTTPService;
                
                	import mx.controls.Alert;
                	import org.vizzuality.event.ChangePanelEvent;
                	import mx.effects.easing.Back;
                	import mx.effects.easing.Cubic;
                	import org.vizzuality.view.SpeciesMapContainer;
                	import gs.easing.Elastic;
                	import mx.controls.Image;
                	import org.papervision3d.materials.MovieMaterial;
                	import org.papervision3d.materials.BitmapMaterial;
                	import org.papervision3d.materials.BitmapAssetMaterial;
                	import org.papervision3d.events.InteractiveScene3DEvent;
                	import gs.TweenMax;
                	import org.vizzuality.v3d.MapContainer;
					import mx.core.UIComponent;
					import org.papervision3d.cameras.Camera3D;
					import org.papervision3d.render.BasicRenderEngine;
					import org.papervision3d.objects.DisplayObject3D;
					import org.papervision3d.scenes.Scene3D;
					import org.papervision3d.view.Viewport3D;
					
					import org.papervision3d.materials.ColorMaterial;
					import org.papervision3d.objects.primitives.Plane;
					
					private var renderer:BasicRenderEngine = new BasicRenderEngine();
					private var scene:Scene3D = new Scene3D();
					private var camera:Camera3D = new Camera3D;
					private var viewport:Viewport3D;
					private var arrSpeciesPlanes:Array = new Array();
					
					
					private static var MP_WIDTH:Number = 880;
					private static var MP_HEIGHT:Number = 688;
					private static var TWEEN_TIME:Number = 0.5;
					
					private var angle:int = 0;
					private var lastViewed:MapContainer;
					private var c:Number = 0;
					private var cc:Number = 0;
					private var totalC:Number = 0;
					private var offset:Number = 0;
					private var gf:GlowFilter = new GlowFilter(0x000000,.1,10,10,2);
					                        
					private var resultAc:ArrayCollection = new ArrayCollection();
					private var t:Timer = new Timer(100,0);
					private var slideShowTimer:Timer = new Timer(10000,0);
					                        
					[Embed(source="img/fakeMapBkg.jpg")] private var fakeMapBkg:Class; 			
					
					public var dataEndPoint:String="http://ec2-174-129-77-94.compute-1.amazonaws.com/amfphp/";			// 	                        
					public var wmsproxy:String="http://ec2-174-129-77-94.compute-1.amazonaws.com/wmsbig.php";	 	//                                

					protected function onInit( event:Event ) : void {
						if(parameters.dataEndPoint!=null) {
							dataEndPoint=parameters.dataEndPoint;
						}  
						if(parameters.wmsproxy!=null) {
							wmsproxy=parameters.wmsproxy;
						}
					
					        viewport = new Viewport3D(canvasPv3D.width, canvasPv3D.height, true, true);
					        viewport.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS,gotoPanel);
					        
					        // these 3 lines are key to putting Papervision in Flex
					        var uicomp:UIComponent = new UIComponent();
					        canvasPv3D.addChild( uicomp );
					        uicomp.addChild( viewport );
					
					        camera.z = 0;
					        camera.zoom = 2;
							
					        callService();
					        // update the scene every frame
					        canvasPv3D.addEventListener(Event.ENTER_FRAME,onEnterFrame);
					        
					        //other stuff 
					        this.addEventListener(KeyboardEvent.KEY_UP, keyboardSpecie);
					        sp.addEventListener("prevSpecie",gotoSpecie);
					        sp.addEventListener("nextSpecie",gotoSpecie);
					        
					        slideShowTimer.addEventListener(TimerEvent.TIMER,nextPanel);
					}
					
					private function callService():void{
						TweenMax.to(quietLoading, .3, {autoAlpha: 1});
						var httpsrv:HTTPService = new HTTPService();
						httpsrv.resultFormat = "text";

						httpsrv.url = dataEndPoint +"json.php/SDRServices.getDistributionsBySource/RED_LIST2008/"+offset;
						//httpsrv.url = "fake.json";
						offset+=10;

						httpsrv.addEventListener(ResultEvent.RESULT,handleResult);
						httpsrv.send();
					}
					
					private function addOne(e:TimerEvent):void{
						var o:Object = new Object();
						o = resultAc.getItemAt(cc);
						if(o.commonName == ""){
							o.commonName = o.scientificName;
							o.scientificName = "";
						}

						addMapContainer(fakeMapBkg,c,(c*-550),o.nub_usage_id,o.commonName,o.scientificName,o.imageURL);
						cc++;
						if(cc<resultAc.length){
							o = resultAc.getItemAt(cc);

							if(o.commonName == ""){
								o.commonName = o.scientificName;
								o.scientificName = "";
							}
							fakeSp.cName = o.commonName;
							fakeSp.sName = o.scientificName;
						}

						if(cc==resultAc.length){
							t.stop();
							cc=0;
							totalC +=resultAc.length-1;
						}
						c++;
					}
					
					private function handleResult(e:ResultEvent):void{
						var resultObj:Object = JSON.decode(String(e.result));				
						resultAc = new ArrayCollection(resultObj.species as Array);
						
						t = new Timer(100,0);
						t.addEventListener(TimerEvent.TIMER,addOne);
						
						var o:Object = resultAc.getItemAt(0);
						if(o.commonName == ""){
							o.commonName = o.scientificName;
							o.scientificName = "";
						}
						fakeSp.cName = o.commonName;
						fakeSp.sName = o.scientificName;
						
						t.start();
						
						TweenMax.to(quietLoading, .3, {autoAlpha: 0});							
					}
					
					private function addMapContainer(m:Class,i:Number,y:Number,nid:Number,cName:String,sName:String,iURL:String):void{
						
						function copyBitmap(target: DisplayObject):Bitmap{
						  var data : BitmapData = new BitmapData(target.width, target.height, true, 0);
						  data.draw(target);
						  var bitmap: Bitmap = new Bitmap(data);
						  return bitmap;
						}
						
						var img:MovieClip = new MovieClip();
						img.addChild(copyBitmap(fakeSp)); 						
						
						/* var mat:MovieMaterial = new MovieMaterial(mc,true); */
						var mat:MovieMaterial = new MovieMaterial(img,true,true,true);
						mat.interactive = true; 
						mat.animated = true;
						MovieMaterial(mat).movie.alpha = .35;						
						
						var mp:MapContainer = new MapContainer(i,nid,cName,sName,iURL,mat,MP_WIDTH, MP_HEIGHT, 4, 4);
						mp.z = 30;
						mp.y = y;
						mp.useOwnContainer = true;
						mp.filters = [gf];
												
						mp.addEventListener( InteractiveScene3DEvent.OBJECT_PRESS, gotoPanel)
						scene.addChild(mp);
						arrSpeciesPlanes.push(mp);
						
						if(c==0){
							lastViewed = mp;
							TweenMax.to(camera, TWEEN_TIME, {y: mp.y});
							TweenMax.to(mp, TWEEN_TIME, {z: 19,ease:Back.easeOut,onComplete:showSpeciesContainer});
							TweenMax.to((mp.material as MovieMaterial).movie, TWEEN_TIME, {alpha: 1});
						}
						
					}
					
					private function onEnterFrame( event : Event ):void {
					        					        
					        // render the scene on every frame
					        renderer.renderScene(scene,camera,viewport);
					}
					
					private function gotoPanel(e:InteractiveScene3DEvent):void{
							if(lastViewed != e.target){
								hideSpeciesContainer();
								if(lastViewed){
									TweenMax.to(lastViewed, TWEEN_TIME, {z: 30,ease:Back.easeOut});
									TweenMax.to(((lastViewed).material as MovieMaterial).movie, TWEEN_TIME, {alpha: .35});
								}
								lastViewed = e.target as MapContainer;
								if(e.target is MapContainer){
									TweenMax.to(camera, TWEEN_TIME, {y: e.target.y});
									TweenMax.to((e.target as MapContainer), TWEEN_TIME, {z: 19,ease:Back.easeOut,onComplete:showSpeciesContainer});
									TweenMax.to(((e.target as MapContainer).material as MovieMaterial).movie, TWEEN_TIME, {alpha: 1});
								}
								if(lastViewed.index == totalC - 2){
									callService();
								}
							}
					}
					
					private function gotoSpecie(e:ChangePanelEvent):void{
							if(lastViewed.index >= 0 && lastViewed.index < totalC){
								hideSpeciesContainer();
								if(lastViewed){
									TweenMax.to(lastViewed, TWEEN_TIME, {z: 30,ease:Back.easeOut});
									TweenMax.to(((lastViewed).material as MovieMaterial).movie, TWEEN_TIME, {alpha: .35});
								}
								TweenMax.to(camera, TWEEN_TIME, {y: (arrSpeciesPlanes[lastViewed.index + e.nextItem] as MapContainer).y})							
								TweenMax.to((arrSpeciesPlanes[lastViewed.index + e.nextItem] as MapContainer), TWEEN_TIME, {z: 19,ease:Back.easeOut,onComplete:showSpeciesContainer});
								TweenMax.to(((arrSpeciesPlanes[lastViewed.index + e.nextItem] as MapContainer).material as MovieMaterial).movie, TWEEN_TIME, {alpha: 1});
								lastViewed = arrSpeciesPlanes[lastViewed.index + e.nextItem] as MapContainer;
								if(lastViewed.index == totalC - 2){
									callService();
								}
							}
					}
					
					private function keyboardSpecie(e:KeyboardEvent):void{
						var ev:ChangePanelEvent;
						if(e.keyCode == 38){
							ev = new ChangePanelEvent("foo", -1);
						}else if(e.keyCode == 40){
							ev = new ChangePanelEvent("foo", 1);
						}
						if(e.keyCode == 38 || e.keyCode == 40){
							gotoSpecie(ev);
						}
					}
					
					private function hideSpeciesContainer():void{
						if(lastViewed){
							lastViewed.filters = [gf];
							TweenMax.to(sp, 0, {autoAlpha: 0});
						}
					}
					
					private function showSpeciesContainer():void{
						sp.cName = lastViewed.commonName;
						sp.sName = lastViewed.scientificName;
						sp.imgURL = lastViewed.imgURL;
						sp.nubid = lastViewed.nubid;
						if(arrSpeciesPlanes[lastViewed.index + 1]){
							sp.nextSpecieName = (arrSpeciesPlanes[lastViewed.index + 1] as MapContainer).commonName;
						}
						if(arrSpeciesPlanes[lastViewed.index - 1]){
							sp.prevSpecieName = (arrSpeciesPlanes[lastViewed.index - 1] as MapContainer).commonName;
						}
						lastViewed.filters = [];
						sp.visible = true;
						TweenMax.to(sp.loadingCanvas,.1,{autoAlpha:1});
						TweenMax.to(sp, TWEEN_TIME, {alpha: 1});
						
						//HACK
						focusManager.setFocus(sp.bt);
					}
					
					private function showInfoOverlay(e:MouseEvent):void{
						TweenMax.to(io, .5, {autoAlpha:1});
					}
					
					public function hideInfoOverlay(e:MouseEvent):void{
						TweenMax.to(io, .5, {autoAlpha:0});
					}					
					
					private function switchSlideShow(e:MouseEvent):void{
						if(slideShowTimer.running){
							slideShowTimer.stop();
						}else{
							slideShowTimer.start();	
						}
					}
					
					private function nextPanel(e:TimerEvent):void{
						var ev:ChangePanelEvent = new ChangePanelEvent("foo", 1);
						gotoSpecie(ev);
					}
					
				]]>
        </mx:Script>
        <mx:Image source="@Embed('skin/assets/appBkg.jpg')" verticalCenter="0" />
        <mx:Image source="@Embed('skin/assets/logoGBIF.png')" bottom="20" left="20"/>
        <mx:Image source="@Embed('skin/assets/logoVIZZ.png')" bottom="7" right="20"/>        
        <mx:Canvas id="canvasPv3D" width="100%" height="100%">
        </mx:Canvas>
        <view:QuietLoading id="quietLoading" right="10" top="10" />
        <view:FakeSpeciesMapContainer id="fakeSp" visible="false" includeInLayout="false" />
        <view:SpeciesMapContainer id="sp" verticalCenter="0" 
        	horizontalCenter="0" visible="false" alpha="0"/>
        	
        <mx:VBox right="20" top="170">
        	<mx:Button styleName="helpButton" width="16" height="16" 
        	useHandCursor="true" mouseChildren="false" buttonMode="true"
        	click="showInfoOverlay(event)"/>
        	<mx:Button styleName="playButton" width="16" height="16" toggle="true"
        	useHandCursor="true" mouseChildren="false" buttonMode="true"
        	click="switchSlideShow(event)"/>
        </mx:VBox>
        <view:InfoOverlay id="io" visible="false" alpha="0"/>
        
</mx:Application>